communication_crystal:
  type: item
  debug: false
  display name: <&6>Communication Crystal
  material: paper
  mechanisms:
    custom_model_data: 1
  lore:
    - <&b>Hold in your <&l>9<&r><&b>th pocket.
    - <&e>Sneak while using to share contact info
  flags:
    right_click_script: communication_crystal_use

communication_crystal_clickable:
  type: item
  debug: false
  display name: <&7>ERROR - THIS IS A BUG
  material: stone
  mechanisms:
    custom_model_data: 1
  lore:
    - <&b>Left muscle to call
  flags:
    run_script: communication_crystal_start_call_use

communication_crystal_use:
  type: task
  debug: false
  script:
    - ratelimit <player> 2t
    - if <player.is_sneaking> && <player.target.exists>:
      - if <player.target.flag[comm_crytal_contacts.<player.uuid>].exists>:
        - narrate "<&e><player.target.flag[name]> already has your contact info."
        - stop
      - narrate "<&e>Contact Info given to <player.target.flag[name]||<player.target.name>>"
      - narrate "<&e>You received Contact Info for <player.flag[name]||<player.name>>" targets:<player.target>
      - flag <player.target> comm_crytal_contacts.<player.uuid>.player:<player>
      - flag <player.target> comm_crytal_contacts.<player.uuid>.name:<player.flag[name]>
      - stop
    - if <player.has_flag[temp.communication_crystal]>:
      - if <player.has_flag[temp.communication_crystal.call.pending]> || <player.has_flag[temp.communication_crystal.call.active]>:
        - run communication_crystal_end_call def:<player>
      - else:
        - run communication_crystal_start_call
    - else:
      - run communication_crystal_start_call

communication_crystal_call_inventory:
  type: inventory
  title: <&6>Who to call?
  inventory: chest
  size: 54

communication_crystal_start_call:
  type: task
  debug: false
  script:
    - define inv <inventory[communication_crystal_call_inventory]>
    - if !<player.has_flag[comm_crytal_contacts]>:
      - narrate "<&e>You have no contacts."
      - stop
    - foreach <player.flag[comm_crytal_contacts].keys> as:uuid:
      - define value <player.flag[comm_crytal_contacts.<[uuid]>.player]>
      - define name <player.flag[comm_crytal_contacts.<[uuid]>.name]>
      - give item:<item[communication_crystal_clickable].with[display=<[value].flag[comm_crystal_color]><[value].flag[name]>;material=<[value].flag[comm_crystal_icon]>].with_flag[target:<[value]>].with_flag[name:<[name]>]> to:<[inv]>
    - inventory open d:<[inv]>

communication_crystal_receive_ping:
  type: command
  name: comm_crystal_receive_ping
  usage: NO
  description: NO
  permissions: not.a.perm
  data_definitions: (server name) (target name) (data type) (data type arguments)
  debug: false
  script:
    - choose <context.args.get[3]>:
      - case CALL_INITIATE:
        - if <context.args.get[1]> == <server.flag[server.name]>:
          - stop
        - define origin_server <context.args.get[1]>
        - define target <server.match_player[<context.args.get[2]>]||null>
        - if <[target]> == null:
          - stop
        - else:
          - define called_by <context.args.get[4]>
          - if <player.has_flag[temp.communication_crystal.call]>:
            - execute as_op "sync console all comm_crystal_receive_ping <server.flag[server.name]> <[target]> CALL_BUSY <[called_by]>"
            - stop
          - if <[target].inventory.slot[9].script.name> == communication_crystal:
            - execute as_op "sync console all comm_crystal_receive_ping <server.flag[server.name]> <[target]> CALL_INITIATE <[called_by]>"
      - case CALL_BUSY:
        - if <context.args.get[1]> == <server.flag[server.name]>:
          - stop
        - define origin_server <context.args.get[1]>
        - define target <server.match_player[<context.args.get[2]>]||null>
        - if <[target]> == null:
          - stop
        - else:
          - if <[target]>
      - case CALL_RECIEVE:
        - if <context.args.get[1]> == <server.flag[server.name]>:
          - stop
        - define origin_server <context.args.get[1]>
        - define target <server.match_player[<context.args.get[2]>]||null>
        - if <[target]> == null:
          - stop
        - else:
          - if <[target]>
        

communication_crystal_remote_ping:
  type: task
  debug: false
  script:
    - playsound sound:herocraft:call.ring volume:0.5 <[target].location> custom

communication_crystal_start_call_use:
  type: task
  debug: false
  script:
    - ratelimit <player> 2t
    - determine passively cancelled
    - define target <player[<context.item.flag[target]>]>
    - define name <player[<context.item.flag[name]>]>
    - inventory close
    - if <[target].has_flag[temp.communication_crystal.call]>:
      - repeat 2:
        - playsound sound:herocraft:call.busy volume:0.5 <player.location> custom
        - wait 3s
      - stop
    - execute as_op "sync console bungee groups create <player.uuid> <player.uuid>" silent
    - flag <player> temp.communication_crystal.call.pending.owner:<player>
    - flag <player> temp.communication_crystal.call.pending.target:<[target]>
    - flag <[target]> temp.communication_crystal.call.pending.target:<player>
    - flag <[target]> temp.communication_crystal.call.pending.owner:<player>
    - wait 1t
    - execute as_op "sync console bungee groups invite <[name]>" silent
    - repeat 20:
      - if !<player.has_flag[temp.communication_crystal.call.pending]>:
        - stop
      - playsound sound:herocraft:call.ring volume:0.5 <player.location> custom
      - playsound sound:herocraft:call.ring volume:0.5 <[target].location> custom
      - wait 3s
    - execute as_op "sync console bungee groups delete" silent

communication_crystal_end_call:
  type: task
  debug: false
  definitions: target
  script:
    - if <player.has_flag[temp.communication_crystal.call.active]>:
      - execute as_op "sync console bungee groups delete" silent player:<[target].flag[temp.communication_crystal.call.active.owner]>
      - if <player.flag[temp.communication_crystal.call.active.owner]> != <[target]>:
        - playsound sound:herocraft:call.end <player.flag[temp.communication_crystal.call.active.owner].location> volume:.8 custom
        - flag <[target].flag[temp.communication_crystal.call.active.owner]> temp.communication_crystal.call:!
      - else:
        - playsound sound:herocraft:call.end <player.flag[temp.communication_crystal.call.active.target].location> volume:.8 custom
        - flag <[target].flag[temp.communication_crystal.call.active.target]> temp.communication_crystal.call:!
      - flag <[target]> temp.communication_crystal.call:!
    - if <player.has_flag[temp.communication_crystal.call.pending]>:
      - execute as_op "sync console bungee groups delete" silent player:<[target].flag[temp.communication_crystal.call.pending.owner]>
      - if <player.flag[temp.communication_crystal.call.pending.owner]> != <[target]>:
        - playsound sound:herocraft:call.end <player.flag[temp.communication_crystal.call.pending.owner].location> volume:.8 custom
        - flag <player.flag[temp.communication_crystal.call.pending.owner]> temp.communication_crystal.call:!
      - else:
        - playsound sound:herocraft:call.end <player.flag[temp.communication_crystal.call.pending.target].location> volume:.8 custom
        - flag <player.flag[temp.communication_crystal.call.pending.target]> temp.communication_crystal.call:!
      - flag <[target]> temp.communication_crystal.call:!
    - playsound sound:herocraft:call.end <[target].location> volume:.8 custom

communication_crystal_catch:
  type: world
  debug: false
  events:
    on groups command:
      - ratelimit <player> 1t
      - if <context.args.get[1]> == join:
        - if <player.has_flag[temp.communication_crystal.call.active]>:
          - run communication_crystal_end_call def:<player>
        - if <player.has_flag[temp.communication_crystal.call.pending]>:
          - flag <player> temp.communication_crystal.call.active:<player.flag[temp.communication_crystal.call.pending]>
          - if <player.flag[temp.communication_crystal.call.pending.owner]> != <player>:
            - define target <player.flag[temp.communication_crystal.call.pending.owner]>
          - else:
            - define target <player.flag[temp.communication_crystal.call.pending.active]>
          - playsound sound:herocraft:call.connect <[target].location> volume:.8 custom
          - playsound sound:herocraft:call.connect <player.location> volume:.8 custom
          - flag <[target]> temp.communication_crystal.call.active:<[target].flag[temp.communication_crystal.call.pending]>
          - flag <[target]> temp.communication_crystal.call.pending:!
          - flag <player> temp.communication_crystal.call.pending:!

sql_init_contacts:
  type: task
  debug: false
  script:
    - flag <player> sql_init.inventory
    - ~sql id:players "update:IF NOT EXISTS (SELECT * FROM player_contacts WHERE uuid = '<player.uuid>') BEGIN INSERT INTO player_contacts (uuid, contacts) VALUES ('<player.uuid>', '<player.flag[comm_crytal_contacts]>') END;"


sql_set_contacts:
  type: task
  debug: false
  script:
    - define length <player.curios.items.as[element].length>
    - ~sql id:players "update:UPDATE player_contacts SET uuid = '<player.uuid>', contacts = '<player.flag[comm_crytal_contacts]>' WHERE uuid = '<player.uuid>';"

sql_get_contacts:
  type: task
  debug: false
  script:
    - ~sql id:players "query:SELECT contacts FROM player_contacts WHERE uuid = '<player.uuid>';" save:inv
    - foreach <entry[inv].result_list.first.first>:
      - narrate <&e><[key]><&6><[value]>