sql_init_inventory:
  type: task
  debug: false
  script:
    - flag <player> sql_init.inventory
    - ~sql id:players "update:IF NOT EXISTS (SELECT * FROM player_inventory WHERE uuid = '<player.uuid>') BEGIN INSERT INTO player_inventory (uuid, inventory, curios) VALUES ('<player.uuid>', '<player.inventory.map_slots>', '<player.curios.items>') END;"


sql_set_inventory:
  type: task
  debug: false
  script:
    - define length <player.curios.items.as[element].length>
    - ~sql id:players "update:UPDATE player_inventory SET uuid = '<player.uuid>', inventory = '<player.inventory.map_slots>', curios = '<player.curios.items.substring[6,<[length].sub[1]>]>' WHERE uuid = '<player.uuid>';"

sql_get_inventory:
  type: task
  debug: false
  script:
    - ~sql id:players "query:SELECT inventory, curios FROM player_inventory WHERE uuid = '<player.uuid>';" save:inv
    - foreach <entry[inv].result_list.first.first>:
      - narrate <&e><[key]><&6><[value]>

sql_restore_inventory:
  type: task
  debug: false
  script:
    - ~sql id:players "query:SELECT inventory, curios FROM player_inventory WHERE uuid = '<player.uuid>';" save:inv
    - inventory clear
    - foreach <entry[inv].result_list.first.first>:
      - inventory set slot:<[key]> o:<[value]> d:<player.inventory>
    - foreach <map[<entry[inv].result_list.first.get[2]>]>:
      - if <[value]> == <item[air]>:
        - foreach next
      - adjust <player> curios_item:<[key]>|<item[<[value]>]>

player_sql_stuff:
  type: world
  debug: false
  events:
    on player joins:
      - run sql_restore_inventory
    on player quits:
      - run sql_set_inventory

player_transfer_server:
  type: task
  debug: false
  definitions: target|server
  script:
    - run sql_set_inventory
    - execute as_server "sync console bungee send <[target].name> <[server]>"